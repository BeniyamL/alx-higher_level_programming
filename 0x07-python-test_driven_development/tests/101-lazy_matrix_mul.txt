===============================
doctest for 101-lazy_matrix_mul
===============================


first import the module
=======================
    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul


How it works
===================
the function accepts two matrix and returns the multiplication of these matrix.if m_a or m_b is not a list: raise a TypeError exception with the message m_a must be a list or m_b must be a list if m_a or m_b is not a list of lists: raise a TypeError exception with the message m_a must be a list of lists or m_b must be a list of lists. To use the system, call the matrix_mul and provide two matrix as a parameter like
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
    [[ 7 10]
     [15 22]]

Test case 0 (without parameter)
===========
    >>> print(lazy_matrix_mul())
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


Test case 1 (with a single parameter)
=====================================
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]]))
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'


Test case 2 (with valid int parameter)
================================================
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
    [[ 7 10]
     [15 22]]

Test cases 3 (with valid float parameter)
=====================================
    >>> print(lazy_matrix_mul([[1.2, 2.4], [3.6, 4.1]], [[1.4, 2.6], [3.1, 4.1]]))
    [[  9.12  12.96]
     [ 17.75  26.17]]

Test case 4 (two marix with different dimension but same no of rows and columns)
=====================================
    >>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
    [[13 16]]


Test case 5 (two matrix with different dimentsion but different no of rows & columns)
========================================================================
    >>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [8, 14], [5, 6]]))
    Traceback (most recent call last):
    ValueError: shapes (1,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)


Test case 6 (two matrix with negative value)
=========================================
    >>> print(lazy_matrix_mul([[-1, -2]], [[3, 4], [-5, -6]]))
    [[7 8]]

Test Case 7 (with the second empty matrix)
=======================================
    >>> print(lazy_matrix_mul([[2, 3], [4, 5]], []))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

Test Case 8 (with the first empty matrix)
======================================
    >>> print(lazy_matrix_mul([],[[2, 3], [4, 5]]))
    Traceback (most recent call last):
    ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

Test case 9 (with non-list number)
==========================================================
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]],2))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

Test case 10 (making first matrix string type)
=========================================
    >>> print(lazy_matrix_mul([['h', 'am'], [3, 4]], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    TypeError: invalid data type for einsum


Test case 11 (the first matrix with different row and colum size)
====================================
    >>> print(lazy_matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

